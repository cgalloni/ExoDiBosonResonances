#ifndef NtupleBranches_H
#define NtupleBranches_H

#include "DataFormats/FWLite/interface/Event.h"
#include "DataFormats/Common/interface/Handle.h"

#include "TTree.h"

#define MAXBQUARKS   2
#define MAXLEP      10
#define MAXJET       2
#define MAXAJET    150
#define MAXW         2
#define MAXH         2
#define MAXVTX      10

namespace NtupleBranches {


//=================================================================================================================== 
  int                ngenB                     ;
  int                ngenBbar                  ;
  std::vector<float> genB_charge               ;
  std::vector<float> genB_e                    ;
  std::vector<float> genB_eta                  ;
  std::vector<int  > genB_pdgId                ;
  std::vector<float> genB_phi                  ;
  std::vector<float> genB_pt                   ;
  std::vector<float> genB_mass                 ;
  std::vector<int  > genB_status               ;
  std::vector<int  > genB_mother               ;
  std::vector<float> genBbar_charge            ;
  std::vector<float> genBbar_e                 ;
  std::vector<float> genBbar_eta               ;
  std::vector<int  > genBbar_pdgId             ;
  std::vector<float> genBbar_phi               ;
  std::vector<float> genBbar_pt                ;
  std::vector<float> genBbar_mass              ;
  std::vector<int  > genBbar_status            ;
  std::vector<int  > genBbar_mother            ;
  int                nhgenB                    ;
  int                nhgenBbar                 ;
  std::vector<float> hgenB_charge              ;
  std::vector<float> hgenB_e                   ;
  std::vector<float> hgenB_eta                 ;
  std::vector<int  > hgenB_pdgId               ;
  std::vector<float> hgenB_phi                 ;
  std::vector<float> hgenB_pt                  ;
  std::vector<float> hgenB_mass                ;
  std::vector<int  > hgenB_status              ;
  std::vector<float> hgenBbar_charge           ;
  std::vector<float> hgenBbar_e                ;
  std::vector<float> hgenBbar_eta              ;
  std::vector<int  > hgenBbar_pdgId            ;
  std::vector<float> hgenBbar_phi              ;
  std::vector<float> hgenBbar_pt               ;
  std::vector<float> hgenBbar_mass             ;
  std::vector<int  > hgenBbar_status           ;
  std::vector<int  > hgenBbar_motherId         ;
  int                ngenH                     ;     
  std::vector<float> genH_charge               ;
  std::vector<float> genH_e       	       ;
  std::vector<float> genH_eta     	       ;
  std::vector<int  > genH_pdgId   	       ;
  std::vector<float> genH_phi     	       ;
  std::vector<float> genH_pt     	       ;
  std::vector<float> genH_mass    	       ;
  std::vector<int  > genH_status 	       ;
  float 	     genW_charge               ;
  float 	     genW_e	               ;
  float 	     genW_eta	               ;
  int   	     genW_pdgId                ;
  float 	     genW_phi	               ;
  float 	     genW_pt	               ;
  float 	     genW_mass                 ;
  int   	     genW_status               ;
  float 	     genWlep_charge            ;
  float 	     genWlep_e                 ;
  float 	     genWlep_eta               ;
  int   	     genWlep_pdgId             ;
  float 	     genWlep_phi               ;
  float 	     genWlep_pt                ;
  float 	     genWlep_mass              ;
  int   	     genWlep_status            ;
  float 	     genWnu_charge             ;
  float 	     genWnu_e	               ;
  float 	     genWnu_eta                ;
  int   	     genWnu_pdgId              ;
  float 	     genWnu_phi                ;
  float 	     genWnu_pt                 ;
  int   	     genWnu_status             ;
  float 	     genWstar_charge           ;
  float 	     genWstar_e                ;
  float 	     genWstar_eta              ;
  int   	     genWstar_pdgId            ;
  float 	     genWstar_phi              ;
  float 	     genWstar_pt               ;
  int   	     genWstar_status           ;
  /*Camilla */
  int   	     nrecoLep	               ;
  std::vector<int  > recoLep_type              ;
  std::vector<float> recoLep_charge            ;
  std::vector<float> recoLep_e                 ;
  std::vector<float> recoLep_eta               ;
  std::vector<float> recoLep_mass              ;
  std::vector<float> recoLep_pt                ;
  std::vector<float> recoLep_phi               ;
  std::vector<float> recoLep_dxy               ;
  std::vector<float> recoLep_dz                ;
  /* */
  std::vector<float> recoLep_idMVAtrig         ;
  std::vector<int  > recoLep_looseId	       ;
  std::vector<int  > recoLep_vetoId	       ;
  std::vector<int  > recoLep_tightId	       ;
  std::vector<int  > recoLep_trigTightId       ;
  std::vector<float> recoLep_pfRhoCorrRelIso   ;
  std::vector<float> recoLep_pfDeltaCorrRelIso ;
  std::vector<float> recoLep_pfRelIso	       ;
  std::vector<float> recoLep_photonIso         ;
  std::vector<float> recoLep_neutralHadIso     ;
  std::vector<float> recoLep_chargedHadIso     ;
  std::vector<float> recoLep_normChi2	       ;
  std::vector<int  > recoLep_isGlobalMuon      ;
  std::vector<int  > recoLep_trackerHits       ;
  std::vector<int  > recoLep_matchedStations   ;
  std::vector<int  > recoLep_pixelHits         ;
  std::vector<int  > recoLep_globalHits        ;
  int                nak5CHSprunedJets         ;
  std::vector<float> ak5CHSprunedJet_pt        ;
  std::vector<float> ak5CHSprunedJet_eta       ;
  std::vector<float> ak5CHSprunedJet_mass      ;
  std::vector<float> ak5CHSprunedJet_phi       ;
  std::vector<float> ak5CHSprunedJet_e         ;
  std::vector<float> ak5CHSprunedJet_csv       ;
  std::vector<int  > ak5CHSprunedJet_flavour   ;
  std::vector<int  > ak5CHSprunedJet_charge    ;  
  int                nak5CHSprunedSubjets      ;
  std::vector<float> ak5CHSprunedSubjet_pt     ;
  std::vector<float> ak5CHSprunedSubjet_eta    ;
  std::vector<float> ak5CHSprunedSubjet_mass   ;
  std::vector<float> ak5CHSprunedSubjet_phi    ;
  std::vector<float> ak5CHSprunedSubjet_e      ;
  std::vector<float> ak5CHSprunedSubjet_csv    ;
  std::vector<int  > ak5CHSprunedSubjet_flavour;  
  std::vector<int  > ak5CHSprunedSubjet_charge ;
  int                nca8CHSprunedJets         ;
  std::vector<float> ca8CHSprunedJet_pt        ;
  std::vector<float> ca8CHSprunedJet_eta       ;
  std::vector<float> ca8CHSprunedJet_mass      ;
  std::vector<float> ca8CHSprunedJet_phi       ;
  std::vector<float> ca8CHSprunedJet_e         ;
  std::vector<float> ca8CHSprunedJet_csv       ;
  std::vector<int  > ca8CHSprunedJet_flavour   ; 
  std::vector<int  > ca8CHSprunedJet_charge    ; 
  int                nca8CHSprunedSubjets      ;
  std::vector<float> ca8CHSprunedSubjet_pt     ;
  std::vector<float> ca8CHSprunedSubjet_eta    ;
  std::vector<float> ca8CHSprunedSubjet_mass   ;
  std::vector<float> ca8CHSprunedSubjet_phi    ;
  std::vector<float> ca8CHSprunedSubjet_e      ;
  std::vector<float> ca8CHSprunedSubjet_csv    ;
  std::vector<int  > ca8CHSprunedSubjet_flavour;  
  std::vector<int  > ca8CHSprunedSubjet_charge ;    
  int                nrecoJets                 ;
  std::vector<float> recoJet_pt                ;
  std::vector<float> recoJet_eta               ;
  std::vector<float> recoJet_mass              ;
  std::vector<float> recoJet_phi               ;
  std::vector<float> recoJet_e                 ;
  std::vector<float> recoJet_csv               ;
  std::vector<float> recoJet_tchp              ;
  std::vector<float> recoJet_chf               ; //ChargedHadronEnergyFraction
  std::vector<float> recoJet_nhf               ; //NeutralHadronEnergyFraction
  std::vector<float> recoJet_cef               ; //ChargedEmEnergyFraction
  std::vector<float> recoJet_nef               ; //NeutralEmEnergyFraction
  std::vector<int  > recoJet_chm	       ; //ChargedMultiplicity
  std::vector<int  > recoJet_nm 	       ; //NeutralMultiplicity
  std::vector<int  > recoJet_flavour	       ;
  std::vector<int  > recoJet_nTracksSV         ; 
  std::vector<float> recoJet_vtxE              ;   
  std::vector<float> recoJet_vtxMass           ;
  std::vector<float> recoJet_vtxPt             ;
  std::vector<float> recoJet_vtxPhi            ;
  std::vector<float> recoJet_vtxEta            ;
  std::vector<float> recoJet_vtxX	       ;
  std::vector<float> recoJet_vtxY	       ;
  std::vector<float> recoJet_vtxZ	       ;
  std::vector<float> recoJet_vtxXerr 	       ;
  std::vector<float> recoJet_vtxYerr 	       ;
  std::vector<float> recoJet_vtxZerr 	       ;
  std::vector<float> recoJet_vtx3dL            ;
  std::vector<float> recoJet_vtx3dLerr         ;
  std::vector<float> recoJet_vtx2dL            ;
  std::vector<float> recoJet_vtx2dLerr         ;
  std::vector<float> recoJet_charge            ;
  std::vector<int  > recoJet_nconstituents     ;
  std::vector<int  > jetTrack_jetIndex         ;
  std::vector<float> jetTrack_chi2             ;
  std::vector<int  > jetTrack_ndof  	       ;
  std::vector<float> jetTrack_dxy	       ;
  std::vector<float> jetTrack_dxyErr	       ;
  std::vector<float> jetTrack_dz	       ;
  std::vector<float> jetTrack_dzErr 	       ;
  std::vector<float> jetTrack_eta	       ;
  std::vector<float> jetTrack_phi	       ;
  std::vector<float> jetTrack_pt	       ;
  std::vector<int  > jetTrack_nhits            ;
  int                nivfSVs		       ;
  std::vector<int  > ivf_numTracksSV	       ;
  std::vector<float> ivf_vtxE                  ;
  std::vector<float> ivf_vtxMass               ;
  std::vector<float> ivf_vtxPt                 ;
  std::vector<float> ivf_vtxPhi                ;
  std::vector<float> ivf_vtxEta                ;
  std::vector<float> ivf_vtxX                  ;
  std::vector<float> ivf_vtxY                  ;
  std::vector<float> ivf_vtxZ                  ;
  std::vector<float> ivf_vtxXerr               ;
  std::vector<float> ivf_vtxYerr               ;
  std::vector<float> ivf_vtxZerr               ;
  std::vector<float> ivf_vtx3dL                ;
  std::vector<float> ivf_vtx3dLerr             ;
  std::vector<float> ivf_vtx2dL                ;
  std::vector<float> ivf_vtx2dLerr             ;
  std::vector<int  > ivfTrack_ndof             ; 
  std::vector<int  > ivfTrack_nhits   	       ;
  std::vector<int  > ivfTrack_vtxIndex	       ;
  std::vector<float> ivfTrack_chi2    	       ;
  std::vector<float> ivfTrack_dxy     	       ;
  std::vector<float> ivfTrack_dxyErr	       ;
  std::vector<float> ivfTrack_dz      	       ;
  std::vector<float> ivfTrack_dzErr 	       ;
  std::vector<float> ivfTrack_eta     	       ;
  std::vector<float> ivfTrack_phi     	       ;
  std::vector<float> ivfTrack_pt               ;
  float 	     MET_et     	       ;
  float 	     MET_phi    	       ;

//=================================================================================================================== 
  edm::Handle<std::vector<float> > MCbquarksCharge		     ;
  edm::Handle<std::vector<float> > MCbquarksE			     ;
  edm::Handle<std::vector<float> > MCbquarksEta  		     ;
  edm::Handle<std::vector<float> > MCbquarksPdgId		     ;
  edm::Handle<std::vector<float> > MCbquarksPhi  		     ;
  edm::Handle<std::vector<float> > MCbquarksPt			     ;
  edm::Handle<std::vector<float> > MCbquarksMass	             ;
  edm::Handle<std::vector<float> > MCbquarksStatus		     ;
  edm::Handle<std::vector<int> >   MCbquarksMotherID		     ;
  edm::Handle<std::vector<float> > MCHiggsBQuarkCharge  	     ;
  edm::Handle<std::vector<float> > MCHiggsBQuarkE       	     ;
  edm::Handle<std::vector<float> > MCHiggsBQuarkEta     	     ;
  edm::Handle<std::vector<float> > MCHiggsBQuarkPdgId   	     ;
  edm::Handle<std::vector<float> > MCHiggsBQuarkPhi     	     ;
  edm::Handle<std::vector<float> > MCHiggsBQuarkPt      	     ;
  edm::Handle<std::vector<float> > MCHiggsBQuarkMass      	     ;
  edm::Handle<std::vector<float> > MCHiggsBQuarkStatus  	     ;
  edm::Handle<std::vector<float> > MCHiggsCharge        	     ;
  edm::Handle<std::vector<float> > MCHiggsE	        	     ;
  edm::Handle<std::vector<float> > MCHiggsEta	        	     ;
  edm::Handle<std::vector<float> > MCHiggsPdgId         	     ;
  edm::Handle<std::vector<float> > MCHiggsPhi	        	     ;
  edm::Handle<std::vector<float> > MCHiggsPt	        	     ;
  edm::Handle<std::vector<float> > MCHiggsMass	        	     ;
  edm::Handle<std::vector<float> > MCHiggsStatus        	     ;
  edm::Handle<std::vector<float> > MCWCharge          		     ;
  edm::Handle<std::vector<float> > MCWE               		     ;
  edm::Handle<std::vector<float> > MCWEta             		     ;
  edm::Handle<std::vector<float> > MCWPdgId           		     ;
  edm::Handle<std::vector<float> > MCWPhi             		     ;
  edm::Handle<std::vector<float> > MCWPt              		     ;
  edm::Handle<std::vector<float> > MCWMass              	     ;
  edm::Handle<std::vector<float> > MCWStatus          		     ;
  edm::Handle<std::vector<int  > > MCWDauOneID                       ;
  edm::Handle<std::vector<float> > MCWleptonCharge    		     ;
  edm::Handle<std::vector<float> > MCWleptonE         		     ;
  edm::Handle<std::vector<float> > MCWleptonEta       		     ;
  edm::Handle<std::vector<float> > MCWleptonPdgId     		     ;
  edm::Handle<std::vector<float> > MCWleptonPhi       		     ;
  edm::Handle<std::vector<float> > MCWleptonPt        		     ;
  edm::Handle<std::vector<float> > MCWleptonMass        	     ;
  edm::Handle<std::vector<float> > MCWleptonStatus    		     ;
  edm::Handle<std::vector<float> > MCWneutrinoCharge  		     ;
  edm::Handle<std::vector<float> > MCWneutrinoE       		     ;
  edm::Handle<std::vector<float> > MCWneutrinoEta     		     ;
  edm::Handle<std::vector<float> > MCWneutrinoPdgId   		     ;
  edm::Handle<std::vector<float> > MCWneutrinoPhi     		     ;
  edm::Handle<std::vector<float> > MCWneutrinoPt      		     ;
  edm::Handle<std::vector<float> > MCWneutrinoStatus  		     ;
  edm::Handle<std::vector<float> > MCWstarCharge      		     ;
  edm::Handle<std::vector<float> > MCWstarE           		     ;
  edm::Handle<std::vector<float> > MCWstarEta         		     ;
  edm::Handle<std::vector<float> > MCWstarPdgId       		     ;
  edm::Handle<std::vector<float> > MCWstarPhi         		     ;
  edm::Handle<std::vector<float> > MCWstarPt	      		     ;
  edm::Handle<std::vector<float> > MCWstarStatus      		     ;        
  edm::Handle<std::vector<float> > allElectronsCharge   	     ;
  edm::Handle<std::vector<float> > allElectronsE                     ;
  edm::Handle<std::vector<float> > allElectronsEta                   ;
  edm::Handle<std::vector<float> > allElectronsMass                  ;
  edm::Handle<std::vector<float> > allElectronsPt                    ;
  edm::Handle<std::vector<float> > allElectronsPhi                   ;
  edm::Handle<std::vector<float> > allElectronsPVDxy                 ;
  edm::Handle<std::vector<float> > allElectronsPVDz                  ;
  edm::Handle<std::vector<float> > allElectronsMvaTrigV0             ;	
  edm::Handle<std::vector<float> > allElectronsPassesLooseID         ;  	
  edm::Handle<std::vector<float> > allElectronsPassesVetoID          ;		
  edm::Handle<std::vector<float> > allElectronsPassesTightID         ;  	
  edm::Handle<std::vector<float> > allElectronsPassesTrigTightID     ;	
  edm::Handle<std::vector<float> > allElectronsPFRhoCorrectedRelIso  ; 
  edm::Handle<std::vector<float> > allElectronsPFDeltaCorrectedRelIso;
  edm::Handle<std::vector<float> > allElectronsPFRelIso              ; 	
  edm::Handle<std::vector<float> > allElectronsChargedHadIso         ;
  edm::Handle<std::vector<float> > allElectronsNeutralHadIso         ;
  edm::Handle<std::vector<float> > allElectronsPhotonIso             ;  
  edm::Handle<std::vector<float> > allMuonsCharge   	             ;
  edm::Handle<std::vector<float> > allMuonsE                         ;
  edm::Handle<std::vector<float> > allMuonsEta                       ;
  edm::Handle<std::vector<float> > allMuonsMass                      ;
  edm::Handle<std::vector<float> > allMuonsPt                        ;
  edm::Handle<std::vector<float> > allMuonsPhi                       ;
  edm::Handle<std::vector<float> > allMuonsPVDxy                     ;
  edm::Handle<std::vector<float> > allMuonsPVDz                      ;
  edm::Handle<std::vector<float> > allMuonsPFRhoCorrectedRelIso      ;
  edm::Handle<std::vector<float> > allMuonsPFDeltaCorrectedRelIso    ;
  edm::Handle<std::vector<float> > allMuonsPFRelIso                  ;  
  edm::Handle<std::vector<float> > allMuonsChargedHadIso             ;
  edm::Handle<std::vector<float> > allMuonsNeutralHadIso             ;
  edm::Handle<std::vector<float> > allMuonsPhotonIso                 ;
  edm::Handle<std::vector<float> > allMuonsNormChi2                  ;
  edm::Handle<std::vector<float> > allMuonsIsGlobalMuon 	     ;
  edm::Handle<std::vector<float> > allMuonsTrackerHits		     ;
  edm::Handle<std::vector<float> > allMuonsMatchedStations	     ;
  edm::Handle<std::vector<float> > allMuonsPixelHits		     ;
  edm::Handle<std::vector<float> > allMuonsGlobalMuonHits            ;
  edm::Handle<std::vector<float> > patMETsPFPhi                      ;
  edm::Handle<std::vector<float> > patMETsPFPt                       ; 
  edm::Handle<std::vector<float> > AK5CHSprunedCharge	             ;
  edm::Handle<std::vector<float> > AK5CHSprunedCSV	 	     ;
  edm::Handle<std::vector<float> > AK5CHSprunedE	 	     ;
  edm::Handle<std::vector<float> > AK5CHSprunedEta	 	     ;
  edm::Handle<std::vector<float> > AK5CHSprunedFlavour   	     ;
  edm::Handle<std::vector<float> > AK5CHSprunedMass	 	     ;
  edm::Handle<std::vector<float> > AK5CHSprunedPhi	 	     ;
  edm::Handle<std::vector<float> > AK5CHSprunedPt	 	     ;
  edm::Handle<std::vector<float> > AK5CHSprunedSubjetsCharge 	     ;
  edm::Handle<std::vector<float> > AK5CHSprunedSubjetsCSV    	     ;
  edm::Handle<std::vector<float> > AK5CHSprunedSubjetsE      	     ;
  edm::Handle<std::vector<float> > AK5CHSprunedSubjetsEta    	     ;
  edm::Handle<std::vector<float> > AK5CHSprunedSubjetsFlavour	     ;
  edm::Handle<std::vector<float> > AK5CHSprunedSubjetsMass   	     ;
  edm::Handle<std::vector<float> > AK5CHSprunedSubjetsPhi    	     ;
  edm::Handle<std::vector<float> > AK5CHSprunedSubjetsPt     	     ;
  edm::Handle<std::vector<float> > CA8CHSprunedCharge	 	     ;
  edm::Handle<std::vector<float> > CA8CHSprunedCSV	 	     ;
  edm::Handle<std::vector<float> > CA8CHSprunedE	 	     ;
  edm::Handle<std::vector<float> > CA8CHSprunedEta	 	     ;
  edm::Handle<std::vector<float> > CA8CHSprunedFlavour   	     ;
  edm::Handle<std::vector<float> > CA8CHSprunedMass	 	     ;
  edm::Handle<std::vector<float> > CA8CHSprunedPhi	 	     ;
  edm::Handle<std::vector<float> > CA8CHSprunedPt	 	     ;
  edm::Handle<std::vector<float> > CA8CHSprunedSubjetsCharge 	     ;
  edm::Handle<std::vector<float> > CA8CHSprunedSubjetsCSV    	     ;
  edm::Handle<std::vector<float> > CA8CHSprunedSubjetsE      	     ;
  edm::Handle<std::vector<float> > CA8CHSprunedSubjetsEta    	     ;
  edm::Handle<std::vector<float> > CA8CHSprunedSubjetsFlavour	     ;
  edm::Handle<std::vector<float> > CA8CHSprunedSubjetsMass   	     ;
  edm::Handle<std::vector<float> > CA8CHSprunedSubjetsPhi    	     ;
  edm::Handle<std::vector<float> > CA8CHSprunedSubjetsPt             ;
  edm::Handle<std::vector<float> > allJetsPFPt                       ;
  edm::Handle<std::vector<float> > allJetsPFEta                      ;
  edm::Handle<std::vector<float> > allJetsPFMass                     ;
  edm::Handle<std::vector<float> > allJetsPFPhi                      ;
  edm::Handle<std::vector<float> > allJetsPFE                        ;
  edm::Handle<std::vector<float> > allJetsPFCSV                      ;
  edm::Handle<std::vector<float> > allJetsPFTCHP                     ;
  edm::Handle<std::vector<float> > allJetsPFChf                      ;
  edm::Handle<std::vector<float> > allJetsPFNhf                      ;
  edm::Handle<std::vector<float> > allJetsPFCef                      ;
  edm::Handle<std::vector<float> > allJetsPFNef                      ;
  edm::Handle<std::vector<float> > allJetsPFChm                      ;
  edm::Handle<std::vector<float> > allJetsPFNm                       ;
  edm::Handle<std::vector<float> > allJetsPFFlavour                  ;
  edm::Handle<std::vector<float> > allJetsPFCharge                   ;
  edm::Handle<std::vector<float> > allJetsPFNconstituents            ;
  edm::Handle<std::vector<float> > allJetsPFTracksChi2               ;
  edm::Handle<std::vector<float> > allJetsPFTracksDxy		     ;
  edm::Handle<std::vector<float> > allJetsPFTracksDxyErr	     ;
  edm::Handle<std::vector<float> > allJetsPFTracksDz		     ;
  edm::Handle<std::vector<float> > allJetsPFTracksDzErr 	     ;
  edm::Handle<std::vector<float> > allJetsPFTracksEta	  	     ;
  edm::Handle<std::vector<float> > allJetsPFTracksPhi	  	     ;
  edm::Handle<std::vector<float> > allJetsPFTracksPt		     ;
  edm::Handle<std::vector<int  > > allJetsPFTracksJetIndex	     ;
  edm::Handle<std::vector<int  > > allJetsPFTracksNdof   	     ;
  edm::Handle<std::vector<int  > > allJetsPFTracksNhits     	     ;
  edm::Handle<std::vector<int  > > SecondaryVerticesNumTracks        ;
  edm::Handle<std::vector<float> > SecondaryVerticesMass             ;
  edm::Handle<std::vector<float> > SecondaryVerticesPt               ;
  edm::Handle<std::vector<float> > SecondaryVerticesPhi              ;
  edm::Handle<std::vector<float> > SecondaryVerticesEta              ;
  edm::Handle<std::vector<float> > SecondaryVerticesE                ;
  edm::Handle<std::vector<float> > SecondaryVerticesX                ;
  edm::Handle<std::vector<float> > SecondaryVerticesY		     ;
  edm::Handle<std::vector<float> > SecondaryVerticesZ		     ;
  edm::Handle<std::vector<float> > SecondaryVerticesXerr	     ;
  edm::Handle<std::vector<float> > SecondaryVerticesYerr	     ;
  edm::Handle<std::vector<float> > SecondaryVerticesZerr             ;
  edm::Handle<std::vector<float> > SecondaryVertices3dL              ;
  edm::Handle<std::vector<float> > SecondaryVertices2dL              ;
  edm::Handle<std::vector<float> > ivfSVE	                     ;
  edm::Handle<std::vector<float> > ivfSVEta			     ;
  edm::Handle<std::vector<float> > ivfSVPhi			     ;
  edm::Handle<std::vector<float> > ivfSVMass			     ;
  edm::Handle<std::vector<float> > ivfSVPt 			     ;
  edm::Handle<std::vector<float> > ivfSVX  			     ;
  edm::Handle<std::vector<float> > ivfSVY  			     ;
  edm::Handle<std::vector<float> > ivfSVZ  			     ;
  edm::Handle<std::vector<float> > ivfSVXerr			     ;
  edm::Handle<std::vector<float> > ivfSVYerr			     ;
  edm::Handle<std::vector<float> > ivfSVZerr			     ;
  edm::Handle<std::vector<int  > > numberOfivfSVs		     ;
  edm::Handle<std::vector<int  > > ivfSVNumTracks		     ;
  edm::Handle<std::vector<int  > > ivfTracksNdof                     ; 
  edm::Handle<std::vector<int  > > ivfTracksNhits   		     ;
  edm::Handle<std::vector<int  > > ivfTracksVtxIndex		     ;
  edm::Handle<std::vector<float> > ivfTracksChi2    		     ;
  edm::Handle<std::vector<float> > ivfTracksDxy     		     ;
  edm::Handle<std::vector<float> > ivfTracksDxyError		     ;
  edm::Handle<std::vector<float> > ivfTracksDz      		     ;
  edm::Handle<std::vector<float> > ivfTracksDzError 		     ;
  edm::Handle<std::vector<float> > ivfTracksEta     		     ;
  edm::Handle<std::vector<float> > ivfTracksPhi     		     ;
  edm::Handle<std::vector<float> > ivfTracksPt      		     ;


//===================================================================================================================      
  void branch( TTree* tree ){

  tree->Branch( "genW_charge"    	    , &genW_charge		 );
  tree->Branch( "genW_e"         	    , &genW_e			 );
  tree->Branch( "genW_eta"	 	    , &genW_eta 		 );
  tree->Branch( "genW_pdgId"     	    , &genW_pdgId		 );
  tree->Branch( "genW_phi"	 	    , &genW_phi 		 );
  tree->Branch( "genW_pt"        	    , &genW_pt  		 );
  tree->Branch( "genW_mass"        	    , &genW_mass		 );
  tree->Branch( "genW_status"    	    , &genW_status		 );
  tree->Branch( "genWlep_charge" 	    , &genWlep_charge		 );
  tree->Branch( "genWlep_e"      	    , &genWlep_e		 );
  tree->Branch( "genWlep_eta"    	    , &genWlep_eta		 );
  tree->Branch( "genWlep_pdgId"  	    , &genWlep_pdgId		 );
  tree->Branch( "genWlep_phi"    	    , &genWlep_phi		 );
  tree->Branch( "genWlep_pt"     	    , &genWlep_pt		 );
  tree->Branch( "genWlep_mass"     	    , &genWlep_mass		 );
  tree->Branch( "genWlep_status" 	    , &genWlep_status		 );
  tree->Branch( "genWnu_charge"  	    , &genWnu_charge		 );
  tree->Branch( "genWnu_e"       	    , &genWnu_e 		 );
  tree->Branch( "genWnu_eta"     	    , &genWnu_eta		 );
  tree->Branch( "genWnu_pdgId"   	    , &genWnu_pdgId		 );
  tree->Branch( "genWnu_phi"     	    , &genWnu_phi		 );
  tree->Branch( "genWnu_pt"      	    , &genWnu_pt		 );
  tree->Branch( "genWnu_status"  	    , &genWnu_status		 );
  tree->Branch( "genWstar_charge"	    , &genWstar_charge  	 );
  tree->Branch( "genWstar_e"     	    , &genWstar_e		 );
  tree->Branch( "genWstar_eta"   	    , &genWstar_eta		 );
  tree->Branch( "genWstar_pdgId" 	    , &genWstar_pdgId		 );
  tree->Branch( "genWstar_phi"   	    , &genWstar_phi		 );
  tree->Branch( "genWstar_pt"    	    , &genWstar_pt		 );
  tree->Branch( "genWstar_status"	    , &genWstar_status  	 );
  tree->Branch( "ngenBbar"                  , &ngenBbar 		 );
  tree->Branch( "ngenB"                     , &ngenB			 );
  tree->Branch( "genB_charge"		    , &genB_charge		 );
  tree->Branch( "genB_e"		    , &genB_e			 );
  tree->Branch( "genB_eta"		    , &genB_eta 		 );
  tree->Branch( "genB_pdgId"		    , &genB_pdgId		 );
  tree->Branch( "genB_phi"		    , &genB_phi 		 );
  tree->Branch( "genB_pt"		    , &genB_pt  		 );
  tree->Branch( "genB_mass"		    , &genB_mass		 );
  tree->Branch( "genB_status"		    , &genB_status		 );
  tree->Branch( "genB_mother"		    , &genB_mother		 );
  tree->Branch( "genBbar_charge"	    , &genBbar_charge		 );
  tree->Branch( "genBbar_e"		    , &genBbar_e		 );
  tree->Branch( "genBbar_eta"		    , &genBbar_eta		 );
  tree->Branch( "genBbar_pdgId" 	    , &genBbar_pdgId		 );
  tree->Branch( "genBbar_phi"		    , &genBbar_phi		 );
  tree->Branch( "genBbar_pt"		    , &genBbar_pt		 );
  tree->Branch( "genBbar_mass"		    , &genBbar_mass		 );
  tree->Branch( "genBbar_status"	    , &genBbar_status		 );
  tree->Branch( "genBbar_mother"	    , &genBbar_mother		 );
  tree->Branch( "nhgenBbar"                 , &nhgenBbar		 );
  tree->Branch( "nhgenB"                    , &nhgenB			 );
  tree->Branch( "hgenB_charge"   	    , &hgenB_charge		 );     
  tree->Branch( "hgenB_e"        	    , &hgenB_e  		 );     
  tree->Branch( "hgenB_eta"      	    , &hgenB_eta		 );     
  tree->Branch( "hgenB_pdgId"    	    , &hgenB_pdgId		 );     
  tree->Branch( "hgenB_phi"      	    , &hgenB_phi		 );     
  tree->Branch( "hgenB_pt"       	    , &hgenB_pt 		 );
  tree->Branch( "hgenB_mass"       	    , &hgenB_mass		 );     
  tree->Branch( "hgenB_status"   	    , &hgenB_status		 );     
  tree->Branch( "hgenBbar_charge"	    , &hgenBbar_charge  	 );     
  tree->Branch( "hgenBbar_e"     	    , &hgenBbar_e		 );     
  tree->Branch( "hgenBbar_eta"   	    , &hgenBbar_eta		 );     
  tree->Branch( "hgenBbar_pdgId" 	    , &hgenBbar_pdgId		 );     
  tree->Branch( "hgenBbar_phi"   	    , &hgenBbar_phi		 );     
  tree->Branch( "hgenBbar_pt"    	    , &hgenBbar_pt		 );
  tree->Branch( "hgenBbar_mass"    	    , &hgenBbar_mass		 );     
  tree->Branch( "hgenBbar_status"	    , &hgenBbar_status  	 );
  tree->Branch( "ngenH"                     , &ngenH			 );     
  tree->Branch( "genH_charge"    	    , &genH_charge		 ); 
  tree->Branch( "genH_e"         	    , &genH_e			 );
  tree->Branch( "genH_eta"       	    , &genH_eta 		 );
  tree->Branch( "genH_pdgId"     	    , &genH_pdgId		 );
  tree->Branch( "genH_phi"       	    , &genH_phi 		 );
  tree->Branch( "genH_pt"        	    , &genH_pt  		 );
  tree->Branch( "genH_mass"        	    , &genH_mass		 );
  tree->Branch( "genH_status"    	    , &genH_status		 );      
  tree->Branch( "nrecoLep"		    , &nrecoLep 		 );     
  tree->Branch( "recoLep_type"  	    , &recoLep_type		 );
  tree->Branch( "recoLep_charge"	    , &recoLep_charge		 );
  tree->Branch( "recoLep_e"		    , &recoLep_e		 );
  tree->Branch( "recoLep_eta"		    , &recoLep_eta		 );
  tree->Branch( "recoLep_mass"  	    , &recoLep_mass		 );
  tree->Branch( "recoLep_pt"		    , &recoLep_pt		 ); 
  tree->Branch( "recoLep_phi"		    , &recoLep_phi		 );
  tree->Branch( "recoLep_dxy"		    , &recoLep_dxy		 );
  tree->Branch( "recoLep_dz"		    , &recoLep_dz		 );
  tree->Branch( "recoLep_idMVAtrig"	    , &recoLep_idMVAtrig	 );
  tree->Branch( "recoLep_looseId"	    , &recoLep_looseId  	 );
  tree->Branch( "recoLep_vetoId"	    , &recoLep_vetoId		 );
  tree->Branch( "recoLep_tightId"	    , &recoLep_tightId  	 );
  tree->Branch( "recoLep_trigTightId"	    , &recoLep_trigTightId	 );
  tree->Branch( "recoLep_pfRhoCorrRelIso"   , &recoLep_pfRhoCorrRelIso   );
  tree->Branch( "recoLep_pfDeltaCorrRelIso" , &recoLep_pfDeltaCorrRelIso );
  tree->Branch( "recoLep_pfRelIso"	    , &recoLep_pfRelIso 	 );
  tree->Branch( "recoLep_photonIso"	    , &recoLep_photonIso	 );
  tree->Branch( "recoLep_neutralHadIso"     , &recoLep_neutralHadIso	 );
  tree->Branch( "recoLep_chargedHadIso"     , &recoLep_chargedHadIso	 );
  tree->Branch( "recoLep_normChi2"	    , &recoLep_normChi2 	 );
  tree->Branch( "recoLep_isGlobalMuon"	    , &recoLep_isGlobalMuon	 );
  tree->Branch( "recoLep_trackerHits"	    , &recoLep_trackerHits	 );
  tree->Branch( "recoLep_matchedStations"   , &recoLep_matchedStations   );
  tree->Branch( "recoLep_pixelHits"	    , &recoLep_pixelHits	 );
  tree->Branch( "recoLep_globalHits"	    , &recoLep_globalHits	 );
  tree->Branch( "MET_et"                    , &MET_et			 );
  tree->Branch( "MET_phi"                   , &MET_phi  		 );
  tree->Branch( "nak5CHSprunedJets"	    , &nak5CHSprunedJets	 );
  tree->Branch( "ak5CHSprunedJet_pt"	    , &ak5CHSprunedJet_pt	 );
  tree->Branch( "ak5CHSprunedJet_eta"	    , &ak5CHSprunedJet_eta	 );
  tree->Branch( "ak5CHSprunedJet_mass"	    , &ak5CHSprunedJet_mass	 );
  tree->Branch( "ak5CHSprunedJet_phi"	    , &ak5CHSprunedJet_phi	 );
  tree->Branch( "ak5CHSprunedJet_e"	    , &ak5CHSprunedJet_e	 );
  tree->Branch( "ak5CHSprunedJet_csv"	    , &ak5CHSprunedJet_csv	 );
  tree->Branch( "ak5CHSprunedJet_flavour"   , &ak5CHSprunedJet_flavour   );
  tree->Branch( "ak5CHSprunedJet_charge"    , &ak5CHSprunedJet_charge    );
  tree->Branch( "nak5CHSprunedSubjets"	    , &nak5CHSprunedSubjets	 );
  tree->Branch( "ak5CHSprunedSubjet_pt"     , &ak5CHSprunedSubjet_pt	 );
  tree->Branch( "ak5CHSprunedSubjet_eta"    , &ak5CHSprunedSubjet_eta	 );
  tree->Branch( "ak5CHSprunedSubjet_mass"   , &ak5CHSprunedSubjet_mass   );
  tree->Branch( "ak5CHSprunedSubjet_phi"    , &ak5CHSprunedSubjet_phi	 );
  tree->Branch( "ak5CHSprunedSubjet_e"	    , &ak5CHSprunedSubjet_e	 );
  tree->Branch( "ak5CHSprunedSubjet_csv"    , &ak5CHSprunedSubjet_csv	 );
  tree->Branch( "ak5CHSprunedSubjet_flavour", &ak5CHSprunedSubjet_flavour);
  tree->Branch( "ak5CHSprunedSubjet_charge" , &ak5CHSprunedSubjet_charge );
  tree->Branch( "nca8CHSprunedJets"	    , &nca8CHSprunedJets	 );
  tree->Branch( "ca8CHSprunedJet_pt"	    , &ca8CHSprunedJet_pt	 );
  tree->Branch( "ca8CHSprunedJet_eta"	    , &ca8CHSprunedJet_eta	 );
  tree->Branch( "ca8CHSprunedJet_mass"	    , &ca8CHSprunedJet_mass	 );
  tree->Branch( "ca8CHSprunedJet_phi"	    , &ca8CHSprunedJet_phi	 );
  tree->Branch( "ca8CHSprunedJet_e"	    , &ca8CHSprunedJet_e	 );
  tree->Branch( "ca8CHSprunedJet_csv"	    , &ca8CHSprunedJet_csv	 );
  tree->Branch( "ca8CHSprunedJet_flavour"   , &ca8CHSprunedJet_flavour   );
  tree->Branch( "ca8CHSprunedJet_charge"    , &ca8CHSprunedJet_charge    );
  tree->Branch( "nca8CHSprunedSubjets"	    , &nca8CHSprunedSubjets	 );
  tree->Branch( "ca8CHSprunedSubjet_pt"     , &ca8CHSprunedSubjet_pt	 );
  tree->Branch( "ca8CHSprunedSubjet_eta"    , &ca8CHSprunedSubjet_eta	 );
  tree->Branch( "ca8CHSprunedSubjet_mass"   , &ca8CHSprunedSubjet_mass   );
  tree->Branch( "ca8CHSprunedSubjet_phi"    , &ca8CHSprunedSubjet_phi	 );
  tree->Branch( "ca8CHSprunedSubjet_e"	    , &ca8CHSprunedSubjet_e	 );
  tree->Branch( "ca8CHSprunedSubjet_csv"    , &ca8CHSprunedSubjet_csv	 );
  tree->Branch( "ca8CHSprunedSubjet_flavour", &ca8CHSprunedSubjet_flavour);
  tree->Branch( "ca8CHSprunedSubjet_charge" , &ca8CHSprunedSubjet_charge );
  tree->Branch( "nrecoJets"                 , &nrecoJets		 );            
  tree->Branch( "recoJet_pt"                , &recoJet_pt		 );     	  
  tree->Branch( "recoJet_eta"               , &recoJet_eta		 );     	  
  tree->Branch( "recoJet_mass"              , &recoJet_mass		 );       
  tree->Branch( "recoJet_phi"               , &recoJet_phi		 );     	  
  tree->Branch( "recoJet_e"                 , &recoJet_e		 );     	  
  tree->Branch( "recoJet_csv"               , &recoJet_csv		 ); 
  tree->Branch( "recoJet_tchp"              , &recoJet_tchp              );    		  
  tree->Branch( "recoJet_chf"               , &recoJet_chf		 );     	  
  tree->Branch( "recoJet_nhf"               , &recoJet_nhf		 );     	  
  tree->Branch( "recoJet_cef"               , &recoJet_cef		 );     	  
  tree->Branch( "recoJet_nef"               , &recoJet_nef		 );     	  
  tree->Branch( "recoJet_chm"               , &recoJet_chm		 );     	  
  tree->Branch( "recoJet_nm"                , &recoJet_nm		 );     	  
  tree->Branch( "recoJet_flavour"           , &recoJet_flavour  	 );
  tree->Branch( "recoJet_charge"            , &recoJet_charge		 );
  tree->Branch( "recoJet_nconstituents"     , &recoJet_nconstituents	 );         
  tree->Branch( "recoJet_nTracksSV"         , &recoJet_nTracksSV	 );
  tree->Branch( "recoJet_vtxE"              , &recoJet_vtxE		 );       
  tree->Branch( "recoJet_vtxMass"           , &recoJet_vtxMass  	 );       
  tree->Branch( "recoJet_vtxPt"             , &recoJet_vtxPt		 );       
  tree->Branch( "recoJet_vtxPhi"            , &recoJet_vtxPhi		 );       
  tree->Branch( "recoJet_vtxEta"            , &recoJet_vtxEta		 );        
  tree->Branch( "recoJet_vtxX"              , &recoJet_vtxX		 );
  tree->Branch( "recoJet_vtxY"  	    , &recoJet_vtxY		 );
  tree->Branch( "recoJet_vtxZ"	            , &recoJet_vtxZ		 );
  tree->Branch( "recoJet_vtxXerr"	    , &recoJet_vtxXerr  	 );
  tree->Branch( "recoJet_vtxYerr"	    , &recoJet_vtxYerr  	 );
  tree->Branch( "recoJet_vtxZerr"  	    , &recoJet_vtxZerr  	 );     
  tree->Branch( "recoJet_vtx3dL"            , &recoJet_vtx3dL		 );
  tree->Branch( "recoJet_vtx3dLerr"         , &recoJet_vtx3dLerr	 );       
  tree->Branch( "recoJet_vtx2dL"            , &recoJet_vtx2dL		 );
  tree->Branch( "recoJet_vtx2dLerr"         , &recoJet_vtx2dLerr	 );
  tree->Branch( "jetTrack_jetIndex"         , &jetTrack_jetIndex	 );
  tree->Branch( "jetTrack_chi2"    	    , &jetTrack_chi2		 );
  tree->Branch( "jetTrack_ndof"  	    , &jetTrack_ndof		 );
  tree->Branch( "jetTrack_dxy"		    , &jetTrack_dxy		 );
  tree->Branch( "jetTrack_dxyErr"	    , &jetTrack_dxyErr  	 );
  tree->Branch( "jetTrack_dz"		    , &jetTrack_dz		 );
  tree->Branch( "jetTrack_dzErr" 	    , &jetTrack_dzErr		 );
  tree->Branch( "jetTrack_eta"		    , &jetTrack_eta		 );
  tree->Branch( "jetTrack_phi"		    , &jetTrack_phi		 );
  tree->Branch( "jetTrack_pt"		    , &jetTrack_pt		 );
  tree->Branch( "jetTrack_nhits"   	    , &jetTrack_nhits		 ); 
  tree->Branch( "nivfSVs"                   , &nivfSVs  		 );
  tree->Branch( "ivf_numTracksSV"           , &ivf_numTracksSV  	 );
  tree->Branch( "ivf_vtxE"      	    , &ivf_vtxE 		 );
  tree->Branch( "ivf_vtxMass"   	    , &ivf_vtxMass		 );
  tree->Branch( "ivf_vtxPt"     	    , &ivf_vtxPt		 );
  tree->Branch( "ivf_vtxPhi"    	    , &ivf_vtxPhi		 );
  tree->Branch( "ivf_vtxEta"    	    , &ivf_vtxEta		 );
  tree->Branch( "ivf_vtxX"      	    , &ivf_vtxX 		 );
  tree->Branch( "ivf_vtxY"      	    , &ivf_vtxY 		 );
  tree->Branch( "ivf_vtxZ"      	    , &ivf_vtxZ 		 );
  tree->Branch( "ivf_vtxXerr"   	    , &ivf_vtxXerr		 );
  tree->Branch( "ivf_vtxYerr"   	    , &ivf_vtxYerr		 );
  tree->Branch( "ivf_vtxZerr"   	    , &ivf_vtxZerr		 );
  tree->Branch( "ivf_vtx3dL"    	    , &ivf_vtx3dL		 );
  tree->Branch( "ivf_vtx3dLerr" 	    , &ivf_vtx3dLerr		 );
  tree->Branch( "ivf_vtx2dL"    	    , &ivf_vtx2dL		 );
  tree->Branch( "ivf_vtx2dLerr" 	    , &ivf_vtx2dLerr		 );
  tree->Branch( "ivfTrack_ndof"             , &ivfTrack_ndof		 );
  tree->Branch( "ivfTrack_nhits"   	    , &ivfTrack_nhits		 );
  tree->Branch( "ivfTrack_vtxIndex"	    , &ivfTrack_vtxIndex	 );
  tree->Branch( "ivfTrack_chi2"    	    , &ivfTrack_chi2		 );
  tree->Branch( "ivfTrack_dxy"	  	    , &ivfTrack_dxy		 );
  tree->Branch( "ivfTrack_dxyErr"	    , &ivfTrack_dxyErr  	 );
  tree->Branch( "ivfTrack_dz"	  	    , &ivfTrack_dz		 );
  tree->Branch( "ivfTrack_dzErr" 	    , &ivfTrack_dzErr		 );
  tree->Branch( "ivfTrack_eta"	  	    , &ivfTrack_eta		 );
  tree->Branch( "ivfTrack_phi"	  	    , &ivfTrack_phi		 );
  tree->Branch( "ivfTrack_pt"	  	    , &ivfTrack_pt		 );
  
}

//===================================================================================================================        
  void getEventByLabels( edm::EventBase const & event ){

    event.getByLabel(std::string("singleTopMCBQuarks:MCbquarksCharge"                        	  	       ), MCbquarksCharge		    );
    event.getByLabel(std::string("singleTopMCBQuarks:MCbquarksE"                             	  	       ), MCbquarksE			    );
    event.getByLabel(std::string("singleTopMCBQuarks:MCbquarksEta"	                     	  	       ), MCbquarksEta  		    );
    event.getByLabel(std::string("singleTopMCBQuarks:MCbquarksPdgId"		             	  	       ), MCbquarksPdgId		    );
    event.getByLabel(std::string("singleTopMCBQuarks:MCbquarksPhi"		             	  	       ), MCbquarksPhi  		    );
    event.getByLabel(std::string("singleTopMCBQuarks:MCbquarksPt"		             	  	       ), MCbquarksPt			    );
    event.getByLabel(std::string("singleTopMCBQuarks:MCbquarksMass"		             	  	       ), MCbquarksMass 		    );
    event.getByLabel(std::string("singleTopMCBQuarks:MCbquarksStatus"		             	  	       ), MCbquarksStatus		    );
    event.getByLabel(std::string("MCTruthParticles:MCbquarksMotherID"  	                     	  	       ), MCbquarksMotherID		    );
    event.getByLabel(std::string("singleTopMCHiggsBQuark:MCHiggsBQuarkCharge"		     	  	       ), MCHiggsBQuarkCharge		    );
    event.getByLabel(std::string("singleTopMCHiggsBQuark:MCHiggsBQuarkE"     		     	  	       ), MCHiggsBQuarkE		    );
    event.getByLabel(std::string("singleTopMCHiggsBQuark:MCHiggsBQuarkEta"   		     	  	       ), MCHiggsBQuarkEta		    );
    event.getByLabel(std::string("singleTopMCHiggsBQuark:MCHiggsBQuarkPdgId" 		     	  	       ), MCHiggsBQuarkPdgId		    );
    event.getByLabel(std::string("singleTopMCHiggsBQuark:MCHiggsBQuarkPhi"   		     	  	       ), MCHiggsBQuarkPhi		    );
    event.getByLabel(std::string("singleTopMCHiggsBQuark:MCHiggsBQuarkPt"    		     	  	       ), MCHiggsBQuarkPt		    );
    event.getByLabel(std::string("singleTopMCHiggsBQuark:MCHiggsBQuarkMass"    		     	  	       ), MCHiggsBQuarkMass		    );
    event.getByLabel(std::string("singleTopMCHiggsBQuark:MCHiggsBQuarkStatus"		     	  	       ), MCHiggsBQuarkStatus		    );
    event.getByLabel(std::string("singleTopMCHiggs:MCHiggsCharge"            		     	  	       ), MCHiggsCharge 		    );
    event.getByLabel(std::string("singleTopMCHiggs:MCHiggsE"	             		     	  	       ), MCHiggsE			    );
    event.getByLabel(std::string("singleTopMCHiggs:MCHiggsEta"               		     	  	       ), MCHiggsEta			    );
    event.getByLabel(std::string("singleTopMCHiggs:MCHiggsPdgId"             		     	  	       ), MCHiggsPdgId  		    );
    event.getByLabel(std::string("singleTopMCHiggs:MCHiggsPhi"               		     	  	       ), MCHiggsPhi			    );
    event.getByLabel(std::string("singleTopMCHiggs:MCHiggsPt"	             		     	  	       ), MCHiggsPt			    );
    event.getByLabel(std::string("singleTopMCHiggs:MCHiggsMass"	             		     	  	       ), MCHiggsMass			    );
    event.getByLabel(std::string("singleTopMCHiggs:MCHiggsStatus"            		     	  	       ), MCHiggsStatus 		    );
    event.getByLabel(std::string("singleTopMCW:MCWCharge"                    		     	  	       ), MCWCharge			    );
    event.getByLabel(std::string("singleTopMCW:MCWE"                         		     	  	       ), MCWE  			    );
    event.getByLabel(std::string("singleTopMCW:MCWEta"                       		     	  	       ), MCWEta			    );
    event.getByLabel(std::string("singleTopMCW:MCWPdgId"                     		     	  	       ), MCWPdgId			    );
    event.getByLabel(std::string("singleTopMCW:MCWPhi"                       		     	  	       ), MCWPhi			    );
    event.getByLabel(std::string("singleTopMCW:MCWPt"                        		     	  	       ), MCWPt 			    );
    event.getByLabel(std::string("singleTopMCW:MCWMass"                        		     	  	       ), MCWMass			    );
    event.getByLabel(std::string("singleTopMCW:MCWStatus"                    		     	  	       ), MCWStatus			    );
    event.getByLabel(std::string("MCTruthParticles:MCWDauOneID"                              	  	       ), MCWDauOneID			    );
    event.getByLabel(std::string("singleTopMCWlepton:MCWleptonCharge"        		     	  	       ), MCWleptonCharge		    );
    event.getByLabel(std::string("singleTopMCWlepton:MCWleptonE"             		     	  	       ), MCWleptonE			    );
    event.getByLabel(std::string("singleTopMCWlepton:MCWleptonEta"           		     	  	       ), MCWleptonEta  		    );
    event.getByLabel(std::string("singleTopMCWlepton:MCWleptonPdgId"         		     	  	       ), MCWleptonPdgId		    );
    event.getByLabel(std::string("singleTopMCWlepton:MCWleptonPhi"           		     	  	       ), MCWleptonPhi  		    );
    event.getByLabel(std::string("singleTopMCWlepton:MCWleptonPt"            		     	  	       ), MCWleptonPt			    );
    event.getByLabel(std::string("singleTopMCWlepton:MCWleptonMass"            		     	  	       ), MCWleptonMass 		    );
    event.getByLabel(std::string("singleTopMCWlepton:MCWleptonStatus"        		     	  	       ), MCWleptonStatus		    );
    event.getByLabel(std::string("singleTopMCWneutrino:MCWneutrinoCharge"    		     	  	       ), MCWneutrinoCharge		    );
    event.getByLabel(std::string("singleTopMCWneutrino:MCWneutrinoE"         		     	  	       ), MCWneutrinoE  		    );
    event.getByLabel(std::string("singleTopMCWneutrino:MCWneutrinoEta"       		     	  	       ), MCWneutrinoEta		    );
    event.getByLabel(std::string("singleTopMCWneutrino:MCWneutrinoPdgId"     		     	  	       ), MCWneutrinoPdgId		    );
    event.getByLabel(std::string("singleTopMCWneutrino:MCWneutrinoPhi"       		     	  	       ), MCWneutrinoPhi		    );
    event.getByLabel(std::string("singleTopMCWneutrino:MCWneutrinoPt"        		     	  	       ), MCWneutrinoPt 		    );
    event.getByLabel(std::string("singleTopMCWneutrino:MCWneutrinoStatus"    		     	  	       ), MCWneutrinoStatus		    );
    event.getByLabel(std::string("singleTopMCWstar:MCWstarCharge"            		     	  	       ), MCWstarCharge 		    );
    event.getByLabel(std::string("singleTopMCWstar:MCWstarE"                 		     	  	       ), MCWstarE			    );
    event.getByLabel(std::string("singleTopMCWstar:MCWstarEta"               		     	  	       ), MCWstarEta			    );
    event.getByLabel(std::string("singleTopMCWstar:MCWstarPdgId"             		     	  	       ), MCWstarPdgId  		    );
    event.getByLabel(std::string("singleTopMCWstar:MCWstarPhi"               		     	  	       ), MCWstarPhi			    );
    event.getByLabel(std::string("singleTopMCWstar:MCWstarPt"                		     	  	       ), MCWstarPt			    );
    event.getByLabel(std::string("singleTopMCWstar:MCWstarStatus"            		     	  	       ), MCWstarStatus 		    );
    event.getByLabel(std::string("nTupleAllElectrons:allElectronsCharge" 	              	  	       ), allElectronsCharge		    );
    event.getByLabel(std::string("nTupleAllElectrons:allElectronsE"		              	  	       ), allElectronsE 		    );
    event.getByLabel(std::string("nTupleAllElectrons:allElectronsEta"		              	  	       ), allElectronsEta		    );
    event.getByLabel(std::string("nTupleAllElectrons:allElectronsMass"		              	  	       ), allElectronsMass		    );
    event.getByLabel(std::string("nTupleAllElectrons:allElectronsPt"		              	  	       ), allElectronsPt		    );
    event.getByLabel(std::string("nTupleAllElectrons:allElectronsPhi"		              	  	       ), allElectronsPhi		    );
    event.getByLabel(std::string("nTupleAllElectrons:allElectronsPVDxy"  	              	  	       ), allElectronsPVDxy		    );
    event.getByLabel(std::string("nTupleAllElectrons:allElectronsPVDz"		              	  	       ), allElectronsPVDz		    );
    event.getByLabel(std::string("nTupleAllElectrons:allElectronsMvaTrigV0"	              	  	       ), allElectronsMvaTrigV0 	    );
    event.getByLabel(std::string("nTupleAllElectrons:allElectronsPassesLooseID"               	  	       ), allElectronsPassesLooseID	    );
    event.getByLabel(std::string("nTupleAllElectrons:allElectronsPassesVetoID"	              	  	       ), allElectronsPassesVetoID	    );
    event.getByLabel(std::string("nTupleAllElectrons:allElectronsPassesTightID"               	  	       ), allElectronsPassesTightID	    );
    event.getByLabel(std::string("nTupleAllElectrons:allElectronsPassesTrigTightID"               	       ), allElectronsPassesTrigTightID     );
    event.getByLabel(std::string("nTupleAllElectrons:allElectronsPFRhoCorrectedRelIso"            	       ), allElectronsPFRhoCorrectedRelIso  );
    event.getByLabel(std::string("nTupleAllElectrons:allElectronsPFDeltaCorrectedRelIso"          	       ), allElectronsPFDeltaCorrectedRelIso);
    event.getByLabel(std::string("nTupleAllElectrons:allElectronsPFRelIso"	             	  	       ), allElectronsPFRelIso  	    );
    event.getByLabel(std::string("nTupleAllElectrons:allElectronsChargedHadIso"                   	       ), allElectronsChargedHadIso	    );
    event.getByLabel(std::string("nTupleAllElectrons:allElectronsNeutralHadIso"                   	       ), allElectronsNeutralHadIso	    );
    event.getByLabel(std::string("nTupleAllElectrons:allElectronsPhotonIso"	             	  	       ), allElectronsPhotonIso 	    );
    event.getByLabel(std::string("nTupleAllMuons:allMuonsCharge" 	              	     	  	       ), allMuonsCharge		    );
    event.getByLabel(std::string("nTupleAllMuons:allMuonsE"		        	          	       ), allMuonsE			    );
    event.getByLabel(std::string("nTupleAllMuons:allMuonsEta"		        	     	  	       ), allMuonsEta			    );
    event.getByLabel(std::string("nTupleAllMuons:allMuonsMass"		        	     	  	       ), allMuonsMass  		    );
    event.getByLabel(std::string("nTupleAllMuons:allMuonsPt"		        	     	  	       ), allMuonsPt			    );
    event.getByLabel(std::string("nTupleAllMuons:allMuonsPhi"		        	     	  	       ), allMuonsPhi			    );
    event.getByLabel(std::string("nTupleAllMuons:allMuonsPVDxy"  	              	     	  	       ), allMuonsPVDxy 		    );
    event.getByLabel(std::string("nTupleAllMuons:allMuonsPVDz"		        	          	       ), allMuonsPVDz  		    );
    event.getByLabel(std::string("nTupleAllMuons:allMuonsPFRhoCorrectedRelIso"    	      	  	       ), allMuonsPFRhoCorrectedRelIso      );
    event.getByLabel(std::string("nTupleAllMuons:allMuonsPFDeltaCorrectedRelIso"  	      	  	       ), allMuonsPFDeltaCorrectedRelIso    );
    event.getByLabel(std::string("nTupleAllMuons:allMuonsPFRelIso"	          	      	  	       ), allMuonsPFRelIso		    );
    event.getByLabel(std::string("nTupleAllMuons:allMuonsChargedHadIso"           	      	  	       ), allMuonsChargedHadIso 	    );
    event.getByLabel(std::string("nTupleAllMuons:allMuonsNeutralHadIso"           	      	  	       ), allMuonsNeutralHadIso 	    );
    event.getByLabel(std::string("nTupleAllMuons:allMuonsPhotonIso"	        	     	  	       ), allMuonsPhotonIso		    );
    event.getByLabel(std::string("nTupleAllMuons:allMuonsNormChi2"	        	     	  	       ), allMuonsNormChi2		    );
    event.getByLabel(std::string("nTupleAllMuons:allMuonsIsGlobalMuon"	        	     	  	       ), allMuonsIsGlobalMuon  	    );
    event.getByLabel(std::string("nTupleAllMuons:allMuonsTrackerHits"	        	     	  	       ), allMuonsTrackerHits		    );
    event.getByLabel(std::string("nTupleAllMuons:allMuonsMatchedStations"	             	  	       ), allMuonsMatchedStations	    );
    event.getByLabel(std::string("nTupleAllMuons:allMuonsPixelHits"	        	     	  	       ), allMuonsPixelHits		    );
    event.getByLabel(std::string("nTupleAllMuons:allMuonsGlobalMuonHits"	             	   	       ), allMuonsGlobalMuonHits	    );
    event.getByLabel(std::string("nTuplePatMETsPF:patMETsPFPt"	        	              	  	       ), patMETsPFPt			    );
    event.getByLabel(std::string("nTuplePatMETsPF:patMETsPFPhi"	        	              	  	       ), patMETsPFPhi  		    );    
    event.getByLabel(std::string("nTupleAK5CHSpruned:AK5CHSprunedCharge"                          	       ), AK5CHSprunedCharge		    );
    event.getByLabel(std::string("nTupleAK5CHSpruned:AK5CHSprunedCombinedSecondaryVertexBJetTags" 	       ), AK5CHSprunedCSV		    );
    event.getByLabel(std::string("nTupleAK5CHSpruned:AK5CHSprunedE"     			  	       ), AK5CHSprunedE 		    );
    event.getByLabel(std::string("nTupleAK5CHSpruned:AK5CHSprunedEta"	  			  	       ), AK5CHSprunedEta		    );
    event.getByLabel(std::string("nTupleAK5CHSpruned:AK5CHSprunedFlavour"    			  	       ), AK5CHSprunedFlavour		    );
    event.getByLabel(std::string("nTupleAK5CHSpruned:AK5CHSprunedMass"      			  	       ), AK5CHSprunedMass		    );
    event.getByLabel(std::string("nTupleAK5CHSpruned:AK5CHSprunedPhi"	   			  	       ), AK5CHSprunedPhi		    );
    event.getByLabel(std::string("nTupleAK5CHSpruned:AK5CHSprunedPt"				  	       ), AK5CHSprunedPt		    );
    event.getByLabel(std::string("nTupleAK5CHSprunedSubjets:AK5CHSprunedSubjetsCharge"                         ), AK5CHSprunedSubjetsCharge 	    );
    event.getByLabel(std::string("nTupleAK5CHSprunedSubjets:AK5CHSprunedSubjetsCombinedSecondaryVertexBJetTags"), AK5CHSprunedSubjetsCSV    	    );
    event.getByLabel(std::string("nTupleAK5CHSprunedSubjets:AK5CHSprunedSubjetsE"     			       ), AK5CHSprunedSubjetsE      	    );
    event.getByLabel(std::string("nTupleAK5CHSprunedSubjets:AK5CHSprunedSubjetsEta"	  		       ), AK5CHSprunedSubjetsEta    	    );
    event.getByLabel(std::string("nTupleAK5CHSprunedSubjets:AK5CHSprunedSubjetsFlavour"    		       ), AK5CHSprunedSubjetsFlavour	    );
    event.getByLabel(std::string("nTupleAK5CHSprunedSubjets:AK5CHSprunedSubjetsMass"      		       ), AK5CHSprunedSubjetsMass   	    );
    event.getByLabel(std::string("nTupleAK5CHSprunedSubjets:AK5CHSprunedSubjetsPhi"	   		       ), AK5CHSprunedSubjetsPhi    	    );
    event.getByLabel(std::string("nTupleAK5CHSprunedSubjets:AK5CHSprunedSubjetsPt"			       ), AK5CHSprunedSubjetsPt     	    );
    event.getByLabel(std::string("nTupleCA8CHSpruned:CA8CHSprunedCharge"                          	       ), CA8CHSprunedCharge		    );
    event.getByLabel(std::string("nTupleCA8CHSpruned:CA8CHSprunedCombinedSecondaryVertexBJetTags" 	       ), CA8CHSprunedCSV		    );
    event.getByLabel(std::string("nTupleCA8CHSpruned:CA8CHSprunedE"     			  	       ), CA8CHSprunedE 		    );
    event.getByLabel(std::string("nTupleCA8CHSpruned:CA8CHSprunedEta"	  			  	       ), CA8CHSprunedEta		    );
    event.getByLabel(std::string("nTupleCA8CHSpruned:CA8CHSprunedFlavour"    			  	       ), CA8CHSprunedFlavour		    );
    event.getByLabel(std::string("nTupleCA8CHSpruned:CA8CHSprunedMass"      			  	       ), CA8CHSprunedMass		    );
    event.getByLabel(std::string("nTupleCA8CHSpruned:CA8CHSprunedPhi"	   			  	       ), CA8CHSprunedPhi		    );
    event.getByLabel(std::string("nTupleCA8CHSpruned:CA8CHSprunedPt"				  	       ), CA8CHSprunedPt		    );
    event.getByLabel(std::string("nTupleCA8CHSprunedSubjets:CA8CHSprunedSubjetsCharge"                         ), CA8CHSprunedSubjetsCharge 	    );
    event.getByLabel(std::string("nTupleCA8CHSprunedSubjets:CA8CHSprunedSubjetsCombinedSecondaryVertexBJetTags"), CA8CHSprunedSubjetsCSV    	    );
    event.getByLabel(std::string("nTupleCA8CHSprunedSubjets:CA8CHSprunedSubjetsE"     			       ), CA8CHSprunedSubjetsE      	    );
    event.getByLabel(std::string("nTupleCA8CHSprunedSubjets:CA8CHSprunedSubjetsEta"	  		       ), CA8CHSprunedSubjetsEta    	    );
    event.getByLabel(std::string("nTupleCA8CHSprunedSubjets:CA8CHSprunedSubjetsFlavour"    		       ), CA8CHSprunedSubjetsFlavour	    );
    event.getByLabel(std::string("nTupleCA8CHSprunedSubjets:CA8CHSprunedSubjetsMass"      		       ), CA8CHSprunedSubjetsMass   	    );
    event.getByLabel(std::string("nTupleCA8CHSprunedSubjets:CA8CHSprunedSubjetsPhi"	   		       ), CA8CHSprunedSubjetsPhi    	    );
    event.getByLabel(std::string("nTupleCA8CHSprunedSubjets:CA8CHSprunedSubjetsPt"			       ), CA8CHSprunedSubjetsPt     	    );    
    event.getByLabel(std::string("nTupleAllJets:allJetsPFPt"			              	  	       ), allJetsPFPt			    );
    event.getByLabel(std::string("nTupleAllJets:allJetsPFEta"  		                      	  	       ), allJetsPFEta  		    );
    event.getByLabel(std::string("nTupleAllJets:allJetsPFMass" 		                      	  	       ), allJetsPFMass 		    );
    event.getByLabel(std::string("nTupleAllJets:allJetsPFPhi"  		                      	  	       ), allJetsPFPhi  		    );
    event.getByLabel(std::string("nTupleAllJets:allJetsPFE"			              	  	       ), allJetsPFE			    );
    event.getByLabel(std::string("nTupleAllJets:allJetsPFCombinedSecondaryVertexBJetTags"     	  	       ), allJetsPFCSV  		    );
    event.getByLabel(std::string("nTupleAllJets:allJetsPFTrackCountingHighPur"                                 ), allJetsPFTCHP                     );
    event.getByLabel(std::string("nTupleAllJets:allJetsPFChargedHadronEnergyFraction"  	      	  	       ), allJetsPFChf  		    );
    event.getByLabel(std::string("nTupleAllJets:allJetsPFNeutralHadronEnergyFraction"  	      	  	       ), allJetsPFNhf  		    );
    event.getByLabel(std::string("nTupleAllJets:allJetsPFChargedEmEnergyFraction"  	      	  	       ), allJetsPFCef  		    );
    event.getByLabel(std::string("nTupleAllJets:allJetsPFNeutralEmEnergyFraction"  	      	  	       ), allJetsPFNef  		    );
    event.getByLabel(std::string("nTupleAllJets:allJetsPFChargedMultiplicity"  		      	  	       ), allJetsPFChm  		    );
    event.getByLabel(std::string("nTupleAllJets:allJetsPFNeutralMultiplicity"		      	  	       ), allJetsPFNm			    );
    event.getByLabel(std::string("nTupleAllJets:allJetsPFFlavour"		              	  	       ), allJetsPFFlavour		    );
    event.getByLabel(std::string("nTupleAllJets:allJetsPFCharge"                              	  	       ), allJetsPFCharge		    );
    event.getByLabel(std::string("nTupleAllJets:allJetsPFNumberOfDaughters"                   	  	       ), allJetsPFNconstituents	    );
    event.getByLabel(std::string("nTupleJetTracks:allJetsPFTracksChi2"                            	       ), allJetsPFTracksChi2		    );
    event.getByLabel(std::string("nTupleJetTracks:allJetsPFTracksDxy"				  	       ), allJetsPFTracksDxy		    );
    event.getByLabel(std::string("nTupleJetTracks:allJetsPFTracksDxyError"    			  	       ), allJetsPFTracksDxyErr 	    );
    event.getByLabel(std::string("nTupleJetTracks:allJetsPFTracksDz"    			  	       ), allJetsPFTracksDz		    );
    event.getByLabel(std::string("nTupleJetTracks:allJetsPFTracksDzError"     			  	       ), allJetsPFTracksDzErr  	    );
    event.getByLabel(std::string("nTupleJetTracks:allJetsPFTracksEta"	   			  	       ), allJetsPFTracksEta		    );
    event.getByLabel(std::string("nTupleJetTracks:allJetsPFTracksPhi"	   			  	       ), allJetsPFTracksPhi		    );
    event.getByLabel(std::string("nTupleJetTracks:allJetsPFTracksPt"    			  	       ), allJetsPFTracksPt		    );
    event.getByLabel(std::string("nTupleJetTracks:allJetsPFTracksJetIndex"    			  	       ), allJetsPFTracksJetIndex	    );
    event.getByLabel(std::string("nTupleJetTracks:allJetsPFTracksNdof"   			  	       ), allJetsPFTracksNdof		    );
    event.getByLabel(std::string("nTupleJetTracks:allJetsPFTracksNhits"   			  	       ), allJetsPFTracksNhits  	    );
    event.getByLabel(std::string("nTupleSecondaryVertices:SecondaryVerticesNumTracks"         	  	       ), SecondaryVerticesNumTracks	    );
    event.getByLabel(std::string("nTupleSecondaryVertices:SecondaryVerticesMass"              	  	       ), SecondaryVerticesMass 	    );
    event.getByLabel(std::string("nTupleSecondaryVertices:SecondaryVerticesPt"		      	  	       ), SecondaryVerticesPt		    );
    event.getByLabel(std::string("nTupleSecondaryVertices:SecondaryVerticesPhi"		      	  	       ), SecondaryVerticesPhi  	    );
    event.getByLabel(std::string("nTupleSecondaryVertices:SecondaryVerticesEta"		      	  	       ), SecondaryVerticesEta  	    );
    event.getByLabel(std::string("nTupleSecondaryVertices:SecondaryVerticesE" 		      	  	       ), SecondaryVerticesE		    );
    event.getByLabel(std::string("nTupleSecondaryVertices:SecondaryVerticesX" 		      	  	       ), SecondaryVerticesX		    );
    event.getByLabel(std::string("nTupleSecondaryVertices:SecondaryVerticesY" 		      	  	       ), SecondaryVerticesY		    );
    event.getByLabel(std::string("nTupleSecondaryVertices:SecondaryVerticesZ" 		      	  	       ), SecondaryVerticesZ		    );
    event.getByLabel(std::string("nTupleSecondaryVertices:SecondaryVerticesXerror" 	      	  	       ), SecondaryVerticesXerr 	    );
    event.getByLabel(std::string("nTupleSecondaryVertices:SecondaryVerticesYerror" 	      	  	       ), SecondaryVerticesYerr 	    );
    event.getByLabel(std::string("nTupleSecondaryVertices:SecondaryVerticesZerror" 	      	  	       ), SecondaryVerticesZerr 	    );
    event.getByLabel(std::string("nTupleSecondaryVertices:SecondaryVertices3dL"		      	  	       ), SecondaryVertices3dL  	    );
    event.getByLabel(std::string("nTupleSecondaryVertices:SecondaryVertices2dL"		      	  	       ), SecondaryVertices2dL  	    );
    event.getByLabel(std::string("nTupleSecondaryVertices:bToCharmDecayVertexMergedE"        	  	       ), ivfSVE			    );
    event.getByLabel(std::string("nTupleSecondaryVertices:bToCharmDecayVertexMergedEta"	     	  	       ), ivfSVEta			    );
    event.getByLabel(std::string("nTupleSecondaryVertices:bToCharmDecayVertexMergedPhi"	     	  	       ), ivfSVPhi			    );
    event.getByLabel(std::string("nTupleSecondaryVertices:bToCharmDecayVertexMergedMass"     	  	       ), ivfSVMass			    );
    event.getByLabel(std::string("nTupleSecondaryVertices:bToCharmDecayVertexMergedPt"	     	  	       ), ivfSVPt			    );
    event.getByLabel(std::string("nTupleSecondaryVertices:bToCharmDecayVertexMergedX"	     	  	       ), ivfSVX			    );
    event.getByLabel(std::string("nTupleSecondaryVertices:bToCharmDecayVertexMergedY"	     	  	       ), ivfSVY			    );
    event.getByLabel(std::string("nTupleSecondaryVertices:bToCharmDecayVertexMergedZ"	     	  	       ), ivfSVZ			    );
    event.getByLabel(std::string("nTupleSecondaryVertices:bToCharmDecayVertexMergedXerror"   	  	       ), ivfSVXerr			    );
    event.getByLabel(std::string("nTupleSecondaryVertices:bToCharmDecayVertexMergedYerror"   	  	       ), ivfSVYerr			    );
    event.getByLabel(std::string("nTupleSecondaryVertices:bToCharmDecayVertexMergedZerror"   	  	       ), ivfSVZerr			    );
    event.getByLabel(std::string("nTupleSecondaryVertices:NumberOfbToCharmDecayVertexMerged" 	  	       ), numberOfivfSVs		    );
    event.getByLabel(std::string("nTupleSecondaryVertices:bToCharmDecayVertexMergedNumTracks"     	       ), ivfSVNumTracks		    );
    event.getByLabel(std::string("nTupleSecondaryVertices:bToCharmDecayVertexMergedTracksNdof"    	       ), ivfTracksNdof 		    );
    event.getByLabel(std::string("nTupleSecondaryVertices:bToCharmDecayVertexMergedTracksNhits"   	       ), ivfTracksNhits		    );
    event.getByLabel(std::string("nTupleSecondaryVertices:bToCharmDecayVertexMergedTracksVtxIndex"	       ), ivfTracksVtxIndex		    );
    event.getByLabel(std::string("nTupleSecondaryVertices:bToCharmDecayVertexMergedTracksChi2"    	       ), ivfTracksChi2 		    );
    event.getByLabel(std::string("nTupleSecondaryVertices:bToCharmDecayVertexMergedTracksDxy"     	       ), ivfTracksDxy  		    );
    event.getByLabel(std::string("nTupleSecondaryVertices:bToCharmDecayVertexMergedTracksDxyError"	       ), ivfTracksDxyError		    );
    event.getByLabel(std::string("nTupleSecondaryVertices:bToCharmDecayVertexMergedTracksDz"      	       ), ivfTracksDz			    );
    event.getByLabel(std::string("nTupleSecondaryVertices:bToCharmDecayVertexMergedTracksDzError" 	       ), ivfTracksDzError		    );
    event.getByLabel(std::string("nTupleSecondaryVertices:bToCharmDecayVertexMergedTracksEta"     	       ), ivfTracksEta  		    );
    event.getByLabel(std::string("nTupleSecondaryVertices:bToCharmDecayVertexMergedTracksPhi"     	       ), ivfTracksPhi  		    );
    event.getByLabel(std::string("nTupleSecondaryVertices:bToCharmDecayVertexMergedTracksPt"      	       ), ivfTracksPt			    );

  }

//=================================================================================================================== 
  void reset( void ){
    
    genB_charge     	      .clear();
    genB_e	    	      .clear();
    genB_eta	    	      .clear();
    genB_pdgId      	      .clear();
    genB_phi	    	      .clear();
    genB_pt	    	      .clear();
    genB_mass	    	      .clear();
    genB_status     	      .clear();
    genB_mother     	      .clear();
    genBbar_charge  	      .clear();
    genBbar_e	    	      .clear();
    genBbar_eta     	      .clear();
    genBbar_pdgId   	      .clear();
    genBbar_phi     	      .clear();
    genBbar_pt      	      .clear();
    genBbar_mass    	      .clear();
    genBbar_status  	      .clear();
    genBbar_mother  	      .clear();
    hgenB_charge    	      .clear();
    hgenB_e	    	      .clear();
    hgenB_eta	    	      .clear();
    hgenB_pdgId    	      .clear();
    hgenB_phi	    	      .clear();
    hgenB_pt	    	      .clear();
    hgenB_mass      	      .clear();
    hgenB_status    	      .clear();
    hgenBbar_charge 	      .clear();
    hgenBbar_e      	      .clear();
    hgenBbar_eta    	      .clear();
    hgenBbar_pdgId  	      .clear();
    hgenBbar_phi    	      .clear();
    hgenBbar_pt     	      .clear();
    hgenBbar_mass   	      .clear();
    hgenBbar_status           .clear();
    genH_charge     	      .clear();
    genH_e          	      .clear();
    genH_eta        	      .clear();
    genH_pdgId      	      .clear();
    genH_phi        	      .clear();
    genH_pt         	      .clear();
    genH_status     	      .clear();
    genH_mass        	      .clear();
    recoLep_type	      .clear();
    recoLep_charge	      .clear();
    recoLep_e		      .clear();
    recoLep_eta 	      .clear();
    recoLep_mass	      .clear();
    recoLep_pt  	      .clear();
    recoLep_phi 	      .clear();
    recoLep_dxy 	      .clear();
    recoLep_dz  	      .clear();
    recoLep_idMVAtrig	      .clear();
    recoLep_looseId	      .clear();
    recoLep_vetoId	      .clear();
    recoLep_tightId	      .clear();
    recoLep_trigTightId       .clear();
    recoLep_pfRhoCorrRelIso   .clear();
    recoLep_pfDeltaCorrRelIso .clear();
    recoLep_pfRelIso	      .clear();
    recoLep_photonIso	      .clear();
    recoLep_neutralHadIso     .clear();
    recoLep_chargedHadIso     .clear();
    recoLep_normChi2	      .clear();
    recoLep_isGlobalMuon      .clear();
    recoLep_trackerHits       .clear();
    recoLep_matchedStations   .clear();
    recoLep_pixelHits	      .clear();
    recoLep_globalHits        .clear();
    ak5CHSprunedJet_pt        .clear();
    ak5CHSprunedJet_eta       .clear();
    ak5CHSprunedJet_mass      .clear();
    ak5CHSprunedJet_phi       .clear();
    ak5CHSprunedJet_e	      .clear();
    ak5CHSprunedJet_csv       .clear();
    ak5CHSprunedJet_flavour   .clear();
    ak5CHSprunedJet_charge    .clear();
    ak5CHSprunedSubjet_pt     .clear();
    ak5CHSprunedSubjet_eta    .clear();
    ak5CHSprunedSubjet_mass   .clear();
    ak5CHSprunedSubjet_phi    .clear();
    ak5CHSprunedSubjet_e      .clear();
    ak5CHSprunedSubjet_csv    .clear();
    ak5CHSprunedSubjet_flavour.clear();
    ak5CHSprunedSubjet_charge .clear();
    ca8CHSprunedJet_pt        .clear();
    ca8CHSprunedJet_eta       .clear();
    ca8CHSprunedJet_mass      .clear();
    ca8CHSprunedJet_phi       .clear();
    ca8CHSprunedJet_e	      .clear();
    ca8CHSprunedJet_csv       .clear();
    ca8CHSprunedJet_flavour   .clear();
    ca8CHSprunedJet_charge    .clear();
    ca8CHSprunedSubjet_pt     .clear();
    ca8CHSprunedSubjet_eta    .clear();
    ca8CHSprunedSubjet_mass   .clear();
    ca8CHSprunedSubjet_phi    .clear();
    ca8CHSprunedSubjet_e      .clear();
    ca8CHSprunedSubjet_csv    .clear();
    ca8CHSprunedSubjet_flavour.clear();
    ca8CHSprunedSubjet_charge .clear();        
    recoJet_pt  	      .clear();
    recoJet_eta 	      .clear();
    recoJet_mass	      .clear();
    recoJet_phi 	      .clear();
    recoJet_e		      .clear();
    recoJet_csv 	      .clear();
    recoJet_tchp              .clear();
    recoJet_chf 	      .clear();
    recoJet_nhf 	      .clear();
    recoJet_cef 	      .clear();
    recoJet_nef 	      .clear();
    recoJet_chm 	      .clear();
    recoJet_nm  	      .clear();
    recoJet_flavour	      .clear();
    recoJet_nTracksSV	      .clear();
    recoJet_vtxE	      .clear();
    recoJet_vtxMass	      .clear();
    recoJet_vtxPt	      .clear();
    recoJet_vtxPhi	      .clear();
    recoJet_vtxEta	      .clear();
    recoJet_vtxX	      .clear();
    recoJet_vtxY	      .clear();
    recoJet_vtxZ	      .clear();
    recoJet_vtxXerr	      .clear();
    recoJet_vtxYerr	      .clear();
    recoJet_vtxZerr	      .clear();
    recoJet_vtx3dL	      .clear();
    recoJet_vtx3dLerr	      .clear();
    recoJet_vtx2dL	      .clear();
    recoJet_vtx2dLerr	      .clear();
    recoJet_charge	      .clear();
    recoJet_nconstituents     .clear();
    jetTrack_jetIndex	      .clear();
    jetTrack_chi2	      .clear();
    jetTrack_ndof	      .clear();
    jetTrack_dxy	      .clear();
    jetTrack_dxyErr	      .clear();
    jetTrack_dz 	      .clear();
    jetTrack_dzErr	      .clear();
    jetTrack_eta	      .clear();
    jetTrack_phi	      .clear();
    jetTrack_pt 	      .clear();
    jetTrack_nhits	      .clear(); 
    ivf_numTracksSV           .clear();
    ivf_vtxE	   	      .clear();
    ivf_vtxMass    	      .clear();
    ivf_vtxPt	   	      .clear();
    ivf_vtxPhi     	      .clear();
    ivf_vtxEta     	      .clear();
    ivf_vtxX	   	      .clear();
    ivf_vtxY	   	      .clear();
    ivf_vtxZ	   	      .clear();
    ivf_vtxXerr    	      .clear();
    ivf_vtxYerr    	      .clear();
    ivf_vtxZerr    	      .clear();
    ivf_vtx3dL     	      .clear();
    ivf_vtx3dLerr  	      .clear();
    ivf_vtx2dL     	      .clear();
    ivf_vtx2dLerr  	      .clear();
    ivfTrack_ndof             .clear();
    ivfTrack_nhits   	      .clear();
    ivfTrack_vtxIndex	      .clear();
    ivfTrack_chi2    	      .clear();
    ivfTrack_dxy     	      .clear();
    ivfTrack_dxyErr	      .clear();
    ivfTrack_dz      	      .clear();
    ivfTrack_dzErr 	      .clear();
    ivfTrack_eta     	      .clear();
    ivfTrack_phi     	      .clear();
    ivfTrack_pt      	      .clear();

}
  
}

#endif // NtupleBranches_H
